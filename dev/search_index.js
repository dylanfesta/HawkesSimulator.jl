var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HawkesSimulator","category":"page"},{"location":"#Hawkes-Processes-Simulator","page":"Home","title":"Hawkes Processes Simulator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nThe documentation is still missing. Please see the \"examples\" section for usage.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Show that rate is equivalent to linear network, in a 2D model","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HawkesSimulator]","category":"page"},{"location":"#HawkesSimulator.draw_spike_raster-Union{Tuple{C}, Tuple{Vector{Vector{Float64}}, Real, Real}} where C<:ColorTypes.Color","page":"Home","title":"HawkesSimulator.draw_spike_raster","text":" draw_spike_raster(trains::Vector{Vector{Float64}},\n  dt::Real,Tend::Real;\n  Tstart::Real=0.0,\n  spike_size::Integer = 5,\n  spike_separator::Integer = 1,\n  background_color::Color=RGB(1.,1.,1.),\n  spike_colors::Union{C,Vector{C}}=RGB(0.,0.0,0.0),\n  max_size::Real=1E4) where C<:Color\n\nDraws a matrix that contains the raster plot of the spike train.\n\nArguments\n\nTrains :  Vector of spike trains. The order of the vector corresponds to \n\nthe order of the plot. First element is at the top, second is second row, etc.\n\ndt : time interval representing one horizontal pixel  \nTend : final time to be considered\n\nOptional arguments\n\nTstart : starting time\nmax_size : throws an error if image is larger than this number (in pixels)\nspike_size : heigh of spike (in pixels)\nspike_separator : space between spikes, and vertical padding\nbackground_color : self-explanatory\nspike_colors : if a single color, color of all spikes, if vector of colors, \n\ncolor for each neuron (length should be same as number of neurons)\n\nreturns\n\nraster_matrix::Matrix{Color} you can save it as a png file\n\n\n\n\n\n","category":"method"},{"location":"#HawkesSimulator.dynamics_step_singlepopulation!-Tuple{Real, HawkesSimulator.RecurrentNetwork}","page":"Home","title":"HawkesSimulator.dynamics_step_singlepopulation!","text":"dynamics_step_singlepopulation!(t_now::Real,ntw::RecurrentNetwork)\n\nIterates a one-population network up until its next spike time. This is done by computing a next spike proposal for each neuron, and then picking the one that happens sooner. This spike is then added to the  spiketrain for that neuron. The fundtion returns the new current time of the simulation.\n\nFor long simulations, this functions should be called jointly with  flush_trains!. Otherwise the spike trains will keep growing, making the  propagation of signals extremely cumbersome.\n\nArguments\n\nt_now - Current time of the simulation\nntw   - The network\n\nReturns\n\nt_now_new - the new current time of the simulation\n\n\n\n\n\n","category":"method"},{"location":"#HawkesSimulator.flush_trains!-Tuple{HawkesSimulator.PopulationState, Real}","page":"Home","title":"HawkesSimulator.flush_trains!","text":"flush_trains!(ps::PopulationState,Ttrigger::Real;\n    Tflush::Union{Real,Nothing}=nothing)\n\nSpike history is spiketimes that do not interact with the kernel (because too old)         This function compares most recent spike with spike history, if enough time has passed   (measured by Ttrigger) it flushes the spiketrain up to Tflush into the history.\n\n\n\n\n\n","category":"method"},{"location":"#HawkesSimulator.warmup_step!-Tuple{Real, HawkesSimulator.RecurrentNetwork, Union{Vector{Vector{Float64}}, Vector{Float64}}}","page":"Home","title":"HawkesSimulator.warmup_step!","text":"warmupstep!(tnow::Real,ntw::RecurrentNetwork,     warmuprates::Union{Vector{Float64},Vector{Vector{Float64}}}) -> tend\n\nIn the warmup phase, all neurons fire as independent Poisson process  with a rate set by warmup_rates.   This is useful to quick-start the network, or set itinitial conditions that are far from the stable point.\n\nArguments\n\nt_now - current time\nntw  - the network (warning: weights and kernels are entirely ignored here)\nwarmup_rates - the desired stationary rates. In a one-population network,   it is a vector with the desired rates. In a multi-population network,   is a collection of vectors, where each vector refers to one population.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"TODO : add other  file. [comment]: <> ( 1. 2D delayed-alpha interactions, and non-delayed autapses 1. 1D and 2D, exponential kernel 1. 1D delayed-alpha kernel 1. Plasticity examples, with pairwise STPD and triplets )","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"EditURL = \"https://github.com/dylanfesta/HawkesSimulator.jl/blob/master/examples/hawkes_vs_2D_linear.jl\"","category":"page"},{"location":"hawkes_vs_2D_linear/#Compares-a-2D-Hawekes-process-to-a-2D-linear-system","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"","category":"section"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"In this example, I show that the mean rates in a 2D Hawes process perfectly match the mean rates of a 2D rate model.","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"I use exponential synaptic kernels (but it is valid for any kernel, since the kernel shape does not influence the mean rate)","category":"page"},{"location":"hawkes_vs_2D_linear/#Initialization","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Initialization","text":"","category":"section"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"using LinearAlgebra,Statistics,StatsBase,Distributions\nusing Plots,NamedColors ; theme(:default)\nusing FFTW\n\nusing ProgressMeter\nusing Random\nRandom.seed!(0)\n\nusing HawkesSimulator; const global H = HawkesSimulator\n\nfunction onedmat(x::Real)\n  return cat(x;dims=2)\nend;\nnothing #hide","category":"page"},{"location":"hawkes_vs_2D_linear/#Rate-Model","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Rate Model","text":"","category":"section"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"function iofunction(v::R,_v0::R,_α::R) where R<:Real\n  return max(_α*(v-_v0),zero(R))\nend\nfunction iofunction_inv(r::R,_v0::R,_α::R) where R<:Real\n  return max(zero(R),r/_α+_v0)\nend\n\nconst v0 = -70.0 # -70\nconst α = 0.03 # 0.3\nconst taus = [20.0, 10.0].*1E-3\nconst weights = [1.25 -0.65 ; 1.2 -0.5]\nconst input = [20.0, 50.0]\nconst dt = 0.01E-3\nconst Ttot = 1.0\nconst taus_hawk = [3.0,3.0];\nnothing #hide","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"Let's plot the activation function","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"_ = let vs = range(-90,50.,length=150)\n  rs = @. iofunction(vs,v0,α)\n  plot(vs,rs;linewidth=2,leg=false,xlabel=\"voltage (mV)\",ylabel=\"rate (Hz)\",color=:black)\nend","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"I run the rate model by Euler integration, with timesteps of 0.01 ms (the variable dt)","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"function euler_dv(v::Vector{R},_weights::Matrix{R},_input::Vector{R},\n    _taus::Vector{R},_v0::R,_α::R) where R<:Real\n  r = @. iofunction(v,_v0,_α)\n  return (.-v .+ (_weights*r) .+ _input) ./ _taus\nend\n\nfunction run_2D_network()\n  v_start_e,v_start_i = 0.0,0.0\n  times = range(0.0,Ttot;step=dt)\n  ntimes = length(times)\n  rates = Matrix{Float64}(undef,2,ntimes)\n  v = [v_start_e,v_start_i]\n  for tt in eachindex(times)\n    rates[:,tt] = iofunction.(v,v0,α)\n    dv = euler_dv(v,weights,input,taus,v0,α)\n    v += dv*dt\n  end\n  return times,rates\nend;\n\n\nruntimes,runrates = run_2D_network();\nnothing #hide","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"rates and times have been stored in the variables above!","category":"page"},{"location":"hawkes_vs_2D_linear/#Hawkes-process","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Hawkes process","text":"","category":"section"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"To define the Hawkes process, I need to find equivalent rates and currents that account for the input-output function that I used.","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"weights_equiv = @. abs(α^2*weights)\ninputs_equiv =  α .* (input .- (α .* weights+I)*fill(v0,2))\nps_e,tr_e = H.population_state_exp_and_trace(1,taus_hawk[1])\nps_i,tr_i = H.population_state_exp_and_trace_inhibitory(1,taus_hawk[2])","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"define conenctions","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"conn_ee = H.ConnectionExpKernel(onedmat(weights_equiv[1,1]),tr_e)\nconn_ie = H.ConnectionExpKernel(onedmat(weights_equiv[2,1]),tr_e)\nconn_ei = H.ConnectionExpKernel(onedmat(weights_equiv[1,2]),tr_i)\nconn_ii = H.ConnectionExpKernel(onedmat(weights_equiv[2,2]),tr_i);\nnothing #hide","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"define populations","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"pop_e = H.PopulationExpKernel(ps_e,inputs_equiv[1:1],(conn_ee,ps_e),(conn_ei,ps_i) )\npop_i = H.PopulationExpKernel(ps_i,inputs_equiv[2:2],(conn_ie,ps_e),(conn_ii,ps_i) );\nnothing #hide","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"define recorder: I record all spiketimes, although I only need the rate","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"nrec = 10_010\nrec = H.RecFullTrain(nrec,2);\nnothing #hide","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"define network:","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"netw = H.RecurrentNetworkExpKernel((pop_e,pop_i),(rec,));\nnothing #hide","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"run network","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"function run_simulation!(network,num_spikes)\n  t_now = 0.0\n  H.reset!(network) # clear spike trains etc\n  for _ in 1:num_spikes\n    t_now = H.dynamics_step!(t_now,network)\n  end\n  return t_now\nend\n\nnspikes = nrec - 1\nt_end=run_simulation!(netw,nspikes)\n\n# #src\n\nrates_e,rates_i = H.numerical_rates(rec);\nnothing #hide","category":"page"},{"location":"hawkes_vs_2D_linear/#Result:-compare-the-rate-in-the-two-sytems","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Result: compare the rate in the two sytems","text":"","category":"section"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"@info \"final rates are $(runrates[:,end])\"\n@info \"Hawkes final rates are $(first.((rates_e,rates_i)))\"","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"THE END","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"","category":"page"},{"location":"hawkes_vs_2D_linear/","page":"Compares a 2D Hawekes process to a 2D linear system","title":"Compares a 2D Hawekes process to a 2D linear system","text":"This page was generated using Literate.jl.","category":"page"}]
}
