var documenterSearchIndex = {"docs":
[{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"EditURL = \"https://github.com/dylanfesta/HawkesSimulator.jl/blob/master/examples/alphadelay.jl\"","category":"page"},{"location":"alphadelay/#D-Hawkes-process-with-delayed-alpha-kernel","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"","category":"section"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"In this example, I simulate either a 1D or a 2D Hawkes process, with a delayed-alpha interaction kernel","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"g(t) = H(t-t_textdelay)   frac(t-t_textdelay)tau^2 \n expleft(- frac(t-t_textdelay)tau right)","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"where H(x) is the Heaviside function: H(x)=0 for x0, H(x)=1 for tgeq 0.","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"Kernels are always normalized so that their integral is 1.","category":"page"},{"location":"alphadelay/#Initialization","page":"1D Hawkes process with delayed alpha kernel","title":"Initialization","text":"","category":"section"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"using LinearAlgebra,Statistics,StatsBase,Distributions\nusing Plots,NamedColors ; theme(:default) #; plotlyjs()\nusing FFTW\n\nusing ProgressMeter\nusing Random\nRandom.seed!(1) # zero does not look as nice :-P\n\nusing HawkesSimulator; const global H = HawkesSimulator\n\nfunction onedmat(x::Real)\n  ret=Matrix{Float64}(undef,1,1)\n  ret[1,1] = x\n  return ret\nend\n\n#","category":"page"},{"location":"alphadelay/#Define-and-visualize-the-kernel","page":"1D Hawkes process with delayed alpha kernel","title":"Define and visualize the kernel","text":"","category":"section"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"mytau = 0.5\nmydelay = 2.0\nmyw = onedmat(0.85)\nmyinput = [0.5,]\n\npop = H.PopulationAlphaDelay(mytau,mydelay)\n\nfunction doplot() # Julia likes functions\n  ts = range(-0.5,8;length=150)\n  y = [H.interaction_kernel(_t,pop) for _t in ts]\n  plot(ts,y ; linewidth=3,leg=false,xlabel=\"time (s)\",\n      ylabel=\"interaction kernel\")\nend\n\ndoplot()","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"Note that the kernel starts well after zero.","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"As a side note: in order to simulate Hawkes processes, one always needs to define a non-increasing upper limit to the kernel. This is what it looks like for this kernel.","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"function doplot() # Julia likes functions\n  ts = range(-0.5,8;length=150)\n  y = [H.interaction_kernel(_t,pop) for _t in ts]\n  yu = [H.interaction_kernel_upper(_t,pop) for _t in ts]\n  plt = plot(ts,y ; linewidth=3,xlabel=\"time (s)\",\n      ylabel=\"interaction kernel\", label=\"true kernel\")\n  plot!(plt, ts,yu ; linewidth=2, label=\"upper limit\", linestyle=:dash)\n  return plt\nend\n\ndoplot()","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"when defining a new kernel in the code, the function interaction_kernel(...) one needs also to define a non-increasing upper limit function, interaction_kernel_upper(...) the closer it is to the true kernel, the more efficient the simulation.","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"#","category":"page"},{"location":"alphadelay/#Build-the-network-and-run-it","page":"1D Hawkes process with delayed alpha kernel","title":"Build the network and run it","text":"","category":"section"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"pops = H.PopulationState(pop,myinput)\nntw = H.InputNetwork(pops,[pops,],[myw,])\n\nfunction run_simulation!(netw,nspikes)\n  t_now = 0.0\n  H.reset!(netw) # clear spike trains etc\n  @showprogress 1.0 \"Running Hawkes process...\" for k in 1:nspikes\n    t_now = H.dynamics_step!(t_now,[netw,])\n    if k%1_000 == 0\n      H.clear_trains!(netw.postpops,50.0) # longer time horizon, because of delay\n    end\n  end\n  H.clear_trains!(netw.postpops,-1.0);\n  return t_now\nend\n\nn_spikes = 80_000\nTmax = run_simulation!(ntw,n_spikes);\n\nratenum = H.numerical_rates(pops)[1]\n\nratefou = let gfou0 = myw[1,1] * H.interaction_kernel_fourier(0,pop)\n  myinput[1]/(1-real(gfou0))\nend\n\n@info \"Mean rate -  numerical $(round(ratenum;digits=2)), Fourier  $(round(ratefou;digits=2))\"\n\n#","category":"page"},{"location":"alphadelay/#Covariance-density","page":"1D Hawkes process with delayed alpha kernel","title":"Covariance density","text":"","category":"section"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"First, compute it numerically for a reasonable time step","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"mytrain = pops.trains_history[1]\nmydt = 0.1\nmyτmax = 60.0\nmytaus = H.get_times(mydt,myτmax)\nntaus = length(mytaus)\ncov_num = H.covariance_self_numerical(mytrain,mydt,myτmax);\nnothing #hide","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"now compute it analytically, at higher resolution, and compare the two","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"function four_high_res(dt::Real,Tmax::Real) # higher time resolution, longer time\n  k1,k2 = 2 , 0.01\n  myτmax = Tmax * k1\n  dt *= k2\n  mytaus = H.get_times(dt,myτmax)\n  nkeep = div(length(mytaus),k1)\n  myfreq = H.get_frequencies_centerzero(dt,myτmax)\n  gfou = myw[1,1] .* H.interaction_kernel_fourier.(myfreq,Ref(pop)) |> ifftshift\n  ffou = let r=ratefou\n    covf(g) = r/((1-g)*(1-g'))\n    map(covf,gfou)\n  end\n  retf = real.(ifft(ffou))\n  retf[2:end] ./= dt # first element is rate\n  return mytaus[1:nkeep],retf[1:nkeep]\nend\n\ntaush,covfou=four_high_res(mydt,myτmax)\n\nfunction doplot()\n  plt = plot(xlabel=\"time delay (s)\",ylabel=\"Covariance density\")\n  plot!(plt,mytaus[2:end], cov_num[2:end] ; linewidth=3, label=\"numerical\" )\n  return plot!(plt,taush[2:end],covfou[2:end]; label=\"analytic\",linewidth=3,linestyle=:dash)\nend\n\ndoplot()","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"THE END","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"","category":"page"},{"location":"alphadelay/","page":"1D Hawkes process with delayed alpha kernel","title":"1D Hawkes process with delayed alpha kernel","text":"This page was generated using Literate.jl.","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"EditURL = \"https://github.com/dylanfesta/HawkesSimulator.jl/blob/master/examples/exp_1and2D.jl\"","category":"page"},{"location":"exp_1and2D/#D-and-2D-Hawkes-processes-with-exponential-kernel","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"In this example, I simulate first a 1D self-exciting Hawkes process and then a 2D one. The interaction kernel is an exponentially decaying function, defined as:","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"g(t) = H(t)   frac1tau  expleft(- fracttau right)","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"where H(t) is the Heaviside function: zero for t0, one for tgeq 0.","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"Note that Kernels are always normalized so that their integral between -infty and +infty is 1.","category":"page"},{"location":"exp_1and2D/#Initialization","page":"1D and 2D Hawkes processes with exponential kernel","title":"Initialization","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"using LinearAlgebra,Statistics,StatsBase,Distributions\nusing Plots,NamedColors ; theme(:default) ; gr()\nusing FFTW\n\nusing ProgressMeter\nusing Random\nRandom.seed!(0)\n\nusing HawkesSimulator; const global H = HawkesSimulator\n\n\"\"\"\n    onedmat(x::R) where R\nGenerates a 1-by-1 Matrix{R} that contains `x` as only element\n\"\"\"\nfunction onedmat(x::R) where R\n  ret=Matrix{R}(undef,1,1)\n  ret[1,1] = x\n  return ret\nend;\n\n#","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"First I define the kernel, and the self-interaction weight. The kernel is defined through a \"Population\": all neurons in the same population have the same kernel.","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"myw is a scaling factor (the weight of the autaptic connection). The baseline rate is given by myinput","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"mytau = 0.5  # kernel time constant\nmyw = onedmat(0.85) # weight: this needs to be a matrix\nmyinput = [0.7,] # this needs to be a vector\npop = H.PopulationExp(mytau);\nnothing #hide","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"This is the plot of the (self) interaction kernel (before  the scaling by myw)","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"function doplot() # Julia likes functions\n  ts = range(-1.0,5;length=150)\n  y = map(t->H.interaction_kernel(t,pop) , ts )\n  plot(ts , y ; linewidth=3,leg=false,xlabel=\"time (s)\",\n      ylabel=\"interaction kernel\")\nend\n\ndoplot()","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"Now I build the network","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"pops = H.PopulationState(pop,myinput)\nntw = H.InputNetwork(pops,[pops,],[myw,]);\nnothing #hide","category":"page"},{"location":"exp_1and2D/#Simulation","page":"1D and 2D Hawkes processes with exponential kernel","title":"Simulation","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"The length of the simulation is measured by the total number of spikes here called n_spikes. The function clear_trains!(...) is used to store older spikes as history and let them be ignored by the kernels.","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"function run_simulation!(netw,nspikes)\n  t_now = 0.0\n  H.reset!(netw) # clear spike trains etc\n  @showprogress 1.0 \"Running Hawkes process...\" for k in 1:nspikes\n    t_now = H.dynamics_step!(t_now,[netw,])\n    if k%1_000 == 0\n      H.clear_trains!(netw.postpops)\n    end\n  end\n  H.clear_trains!(netw.postpops,-1.0);\n  return t_now\nend\n\nn_spikes = 80_000\nTmax = run_simulation!(ntw,n_spikes)\navg_rate = n_spikes/Tmax;\n\n#","category":"page"},{"location":"exp_1and2D/#Visualize-raster-plot-of-the-events","page":"1D and 2D Hawkes processes with exponential kernel","title":"Visualize raster plot of the events","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"the raster plot shows some correlation between the neural activities neuron one (lower row) excites neuron two (upper row)","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"function rasterplot(tlims = (2000.,2020.) )\n  _train = pops.trains_history[1]\n  plt=plot()\n  train = filter(t-> tlims[1]< t < tlims[2],_train)\n  nspk = length(train)\n  scatter!(plt,train,fill(0.1,nspk),markersize=30,\n      markercolor=:black,markershape=:vline,leg=false)\n  return plot!(plt,ylims=(0.0,0.2),xlabel=\"time (s)\")\nend\n\nrasterplot()","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"event times are always stored in pops.trains_history","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"#","category":"page"},{"location":"exp_1and2D/#Plot-the-instantaneous-rate","page":"1D and 2D Hawkes processes with exponential kernel","title":"Plot the instantaneous rate","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"This is the probability of a spike given the past activity up until that moment. It is usually denoted by lambda^*(t).","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"function get_insta_rate(t)\n  _train = pops.trains_history[1]\n  myinput[1] + H.interaction(t,_train,myw[1],pops.pop,false)\nend\nfunction plot_instarate(tlims=(2000,2020))\n  tplot = range(tlims...;length=100)\n  _train = pops.trains_history[1]\n  tspk = filter(t-> tlims[1]<=t<=tlims[2],_train) # add the exact spiketimes for cleaner plot\n  tplot = sort(vcat(tplot,tspk,tspk .- 1E-4))\n  plt=plot(xlabel=\"time (s)\",ylabel=\"instantaneous rate\")\n  plot!(plt,tplot,get_insta_rate.(tplot);linewidth=2,color=:black)\n  scatter!(tspk,get_insta_rate.(tspk);leg=false)\n  plot!(plt,tplot, fill(avg_rate,length(tplot)), color=:red,linestyle=:dash)\nend\nplot_instarate()","category":"page"},{"location":"exp_1and2D/#Plot-the-total-event-counts","page":"1D and 2D Hawkes processes with exponential kernel","title":"Plot the total event counts","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"function plot_counts(tlims=(0.,1000.))\n  tplot = range(tlims...;length=100)\n  _train = pops.trains_history[1]\n  nevents(tnow::Real) = count(t-> t <= tnow,_train)\n  plt=plot(xlabel=\"time (s)\",ylabel=\"number of events\",leg=false)\n  plot!(plt,tplot,nevents.(tplot),color=:black,linewidth=2)\n  plot!(plt,tplot , tplot .* avg_rate,color=:red,linestyle=:dash)\nend\nplot_counts()","category":"page"},{"location":"exp_1and2D/#Rate","page":"1D and 2D Hawkes processes with exponential kernel","title":"Rate","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"Now I compare the numerical rate with the analytic solution, that used the Fourier transform","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"ratenum = H.numerical_rates(pops)[1]","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"this is the general equation for rate in a self-excting Hawkes process, from Hawkes 1976","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"ratefou = let gfou0 = myw[1,1] * H.interaction_kernel_fourier(0,pop)\n  myinput[1]/(1-real(gfou0))\nend;\n\n@info \"Total duration $(round(Tmax;digits=1)) s\"\n@info \"Mean rate -  numerical $(round(ratenum;digits=2)), analytic  $(round(ratefou;digits=2))\"\n\n#","category":"page"},{"location":"exp_1and2D/#Covariance-density","page":"1D and 2D Hawkes processes with exponential kernel","title":"Covariance density","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"TODO : write definition","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"I compute the covariance density it numerically. The time inteval mydt should not be too small.","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"mytrain = pops.trains_history[1]\nmydt = 0.1\nmyτmax = 25.0\nmytaus = H.get_times(mydt,myτmax)\nntaus = length(mytaus)\ncov_num = H.covariance_self_numerical(mytrain,mydt,myτmax);\n\n#","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"Now I compute the covariance density analytically, at higher resolution, and I compare the two.","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"function four_high_res(dt::Real,Tmax::Real) # higher time resolution, longer time\n  k1,k2 = 2 , 0.01\n  myτmax = Tmax * k1\n  dt *= k2\n  mytaus = H.get_times(dt,myτmax)\n  nkeep = div(length(mytaus),k1)\n  myfreq = H.get_frequencies_centerzero(dt,myτmax)\n  gfou = myw[1,1] .* H.interaction_kernel_fourier.(myfreq,Ref(pop)) |> ifftshift\n  ffou = let r=ratefou\n    covf(g) = r/((1-g)*(1-g'))\n    map(covf,gfou)\n  end\n  retf = real.(ifft(ffou)) ./ dt\n  retf[1] *= dt  # first element is rate\n  return mytaus[1:nkeep],retf[1:nkeep]\nend\n\n(taush,covfou)=four_high_res(mydt,myτmax)\n\nfunction doplot()\n  plt = plot(xlabel=\"time delay (s)\",ylabel=\"Covariance density\")\n  plot!(plt,mytaus[2:end], cov_num[2:end] ; linewidth=3, label=\"simulation\" )\n  plot!(plt,taush[2:end],covfou[2:end]; label=\"analytic\",linewidth=3,linestyle=:dash)\n  return plt\nend\ndoplot()","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"1D system completed !","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"#","category":"page"},{"location":"exp_1and2D/#Same-results,-but-in-a-2D-system","page":"1D and 2D Hawkes processes with exponential kernel","title":"Same results, but in a 2D system","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"myτ = 1/2.33\nmywmat = [ 0.31   0.3\n           0.9  0.15 ]\nmyin = [1.0,0.1]\np1 = H.PopulationExp(myτ)\nps1 = H.PopulationState(p1,myin)\nntw = H.InputNetwork(ps1,[ps1,],[mywmat,]);\nnothing #hide","category":"page"},{"location":"exp_1and2D/#Start-the-simulation","page":"1D and 2D Hawkes processes with exponential kernel","title":"Start the simulation","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"the function run_simulation!(...) has been defined above Note that n_spikes is the total number of spikes among all units in the system.","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"n_spikes = 500_000\n\nTmax = run_simulation!(ntw,n_spikes);\nnothing #hide","category":"page"},{"location":"exp_1and2D/#Check-the-rates","page":"1D and 2D Hawkes processes with exponential kernel","title":"Check the rates","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"The analytic rate is from  Eq between 6 and  7 in Hawkes 1971","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"num_rates = H.numerical_rates(ps1)\nmyspikes_both = ps1.trains_history\n\nratefou = let G0 =  mywmat .* H.interaction_kernel_fourier(0,p1)\n  inv(I-G0)*myin |> real\nend\n\n@info \"Total duration $(round(Tmax;digits=1)) s\"\n@info \"Rates are $(round.(num_rates;digits=2))\"\n@info \"Analytic rates are $(round.(ratefou;digits=2)) Hz\"\n\n#","category":"page"},{"location":"exp_1and2D/#Covariance-density-2","page":"1D and 2D Hawkes processes with exponential kernel","title":"Covariance density","text":"","category":"section"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"there are 4 combinations, therefore I will compare 4 lines.","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"mydt = 0.1\nmyτmax = 15.0\nmytaus = H.get_times(mydt,myτmax)\nntaus = length(mytaus)\ncov_num = H.covariance_density_numerical(myspikes_both,mydt,myτmax)\n\n\nfunction doplot()\n  plt=plot(xlabel=\"time delay (s)\",ylabel=\"Covariance density\")\n  for i in 1:2, j in 1:2\n    plot!(plt,mytaus[2:end-1],cov_num[i,j,2:end-1], linewidth = 3, label=\"cov $i-$j\")\n  end\n  return plt\nend\n\ndoplot()","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"The analytic solution is eq 12 from Hawkes 1971","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"function four_high_res(dt::Real,Tmax::Real)\n  k1 = 2\n  k2 = 0.005\n  myτmax,mydt = Tmax * k1, dt*k2\n  mytaus = H.get_times(mydt,myτmax)\n  nkeep = div(length(mytaus),k1)\n  myfreq = H.get_frequencies_centerzero(mydt,myτmax)\n  G_omega = map(mywmat) do w\n    ifftshift( w .* H.interaction_kernel_fourier.(myfreq,Ref(p1)))\n  end\n  D = Diagonal(ratefou)\n  M = Array{ComplexF64}(undef,2,2,length(myfreq))\n  Mt = similar(M,Float64)\n  for i in eachindex(myfreq)\n    G = getindex.(G_omega,i)\n    M[:,:,i] = (I-G)\\D/(I-G')\n  end\n  for i in 1:2,j in 1:2\n    Mt[i,j,:] = real.(ifft(M[i,j,:]))\n    Mt[i,j,2:end] ./= mydt # diagonal of t=0 contains the rate\n  end\n  return mytaus[1:nkeep],Mt[:,:,1:nkeep]\nend\n\ntaush,Cfou=four_high_res(mydt,myτmax)\n\nfunction oneplot(i,j)\n  plt=plot(xlabel=\"time delay (s)\",ylabel=\"Covariance density\",title=\"cov $i - $j\")\n  plot!(plt,mytaus[2:end],cov_num[i,j,2:end] ; linewidth = 3, label=\"simulation\")\n  plot!(plt,taush[2:end],Cfou[i,j,2:end]; linestyle=:dash, linewidth=3, label=\"analytic\")\nend","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"1","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"oneplot(1,1)","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"2","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"oneplot(1,2)","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"3","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"oneplot(2,1)","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"4","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"oneplot(2,2)","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"THE END","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"","category":"page"},{"location":"exp_1and2D/","page":"1D and 2D Hawkes processes with exponential kernel","title":"1D and 2D Hawkes processes with exponential kernel","text":"This page was generated using Literate.jl.","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"EditURL = \"https://github.com/dylanfesta/HawkesSimulator.jl/blob/master/examples/2d_delay_autapses.jl\"","category":"page"},{"location":"2d_delay_autapses/#D-process-with-delayed-alpha-mutual-interactions-and-exp-self-interaction","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"","category":"section"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"Here I consider two neurons with a delayed interaction, that self-interact without delay.","category":"page"},{"location":"2d_delay_autapses/#Initialization","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"Initialization","text":"","category":"section"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"using ProgressMeter\nusing LinearAlgebra,Statistics,StatsBase,Distributions\nusing Plots,NamedColors ; theme(:default)\nusing SparseArrays\nusing FFTW\nusing Random\nRandom.seed!(0)\n\nusing HawkesSimulator; global const H = HawkesSimulator\n\n#","category":"page"},{"location":"2d_delay_autapses/#Define-the-interaction-kernel","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"Define the interaction kernel","text":"","category":"section"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"The kernel is a delayed-alpha, see that example file for definition and details.","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"Important : the autaptic weights (diagonal of wmat) are set to zero if not, there would also be a self-delayed-interaction.","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"mytau = 0.6\nmydelay = 1.0\nmywmat = [ 0.0   0.1\n           1.8   0.0 ]\n\nmyinput = [0.2,0.1]\n\npop = H.PopulationAlphaDelay(mytau,mydelay)\npops = H.PopulationState(pop,myinput)","category":"page"},{"location":"2d_delay_autapses/#Define-the-autapses","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"Define the autapses","text":"","category":"section"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"the autaptic weights are mywautaps the self-interaction kernel is popautaps","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"mywautaps = [0.5,0.2]\npopautaps = H.PopulationExp(0.4)\nautapses_pop = H.Autapses(mywautaps,popautaps)","category":"page"},{"location":"2d_delay_autapses/#Build-the-network-and-run-simulation","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"Build the network and run simulation","text":"","category":"section"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"ntw = H.InputNetwork(pops,[pops,],[mywmat,],autapses_pop)\n\nfunction run_simulation!(netw,nspikes)\n  t_now = 0.0\n  H.reset!(netw) # clear spike trains etc\n  @showprogress 1.0 \"Running Hawkes process...\" for k in 1:nspikes\n    t_now = H.dynamics_step!(t_now,[netw,])\n    if k%1_000 == 0\n      H.clear_trains!(netw.postpops,50.0) # longer time horizon, because of delay\n    end\n  end\n  H.clear_trains!(netw.postpops,-1.0);\n  return t_now\nend\n\nn_spikes = 100_000\nTmax = run_simulation!(ntw,n_spikes);\n\n@info \"Total duration $(round(Tmax;digits=1))\"","category":"page"},{"location":"2d_delay_autapses/#Compare-rate-,-simulation-vs-analytic","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"Compare rate , simulation vs analytic","text":"","category":"section"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"ratenum = H.numerical_rates(pops)","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"analytic rate from fourier Eq between 6 and  7 in Hawkes note that I need to add autapses to G0 separately","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"ratefou = let G0 =  mywmat .* H.interaction_kernel_fourier(0,pop)\n  G0 .+=  diagm( 0 => mywautaps .* H.interaction_kernel_fourier(0,popautaps) )\n  inv(I-G0)*myinput|> real\nend\n\n@info \"Mean rate -  simulation $(round.(ratenum;digits=2)), analytic  $(round.(ratefou;digits=2))\"\n\n#","category":"page"},{"location":"2d_delay_autapses/#Covariance-density","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"Covariance density","text":"","category":"section"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"As in previous examples, compute from simulaton and then analytic","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"myspikes_all = pops.trains_history\n\nmydt = 0.1\nmyτmax = 30.0\nmytaus = H.get_times(mydt,myτmax)\nntaus = length(mytaus)\ncov_num = H.covariance_density_numerical(myspikes_all,mydt,myτmax)","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"plot all numerical covariance densities","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"function doplot()\n  plt = plot(xlabel=\"time delay (s)\",ylabel=\"Covariance density\",title=\"simulation\")\n  for i in 1:2, j in 1:2\n    plot!(plt,mytaus[2:end-1],cov_num[i,j,2:end-1] ; linewidth = 2,label=\"cov $i - $j\")\n  end\n  return plt\nend\ndoplot()","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"the bumps reflect the delayed interactions","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"function four_high_res(dt::Real,Tmax::Real)\n  k1 = 2\n  k2 = 0.01\n  myτmax,mydt = Tmax * k1, dt*k2\n  mytaus = H.get_times(mydt,myτmax)\n  nkeep = div(length(mytaus),k1)\n  myfreq = H.get_frequencies_centerzero(mydt,myτmax)\n  G_omega = map(mywmat) do w\n    ifftshift( w .* H.interaction_kernel_fourier.(myfreq,Ref(pop)))\n  end\n  for k in 1:size(mywmat,1) # add autapses\n    waut = mywautaps[k]\n    Gaut = ifftshift(waut .*  H.interaction_kernel_fourier.(myfreq,Ref(popautaps)))\n    G_omega[k,k] .+= Gaut\n  end\n  D = Diagonal(ratefou)\n  M = Array{ComplexF64}(undef,2,2,length(myfreq))\n  Mt = similar(M,Float64)\n  for i in eachindex(myfreq)\n    G = getindex.(G_omega,i)\n    M[:,:,i] = (I-G)\\D/(I-G')\n  end\n  for i in 1:2,j in 1:2\n    Mt[i,j,:] = real.(ifft(M[i,j,:]))\n    Mt[i,j,2:end] ./= mydt\n  end\n  return mytaus[1:nkeep],Mt[:,:,1:nkeep]\nend\n\n\n(taush,Cfou)=four_high_res(mydt,myτmax)\n\n\nfunction oneplot(i,j)\n  plt = plot(xlabel=\"time delay (s)\",ylabel=\"Covariance density\",title=\"cov $i - $j\")\n  plot!(plt,mytaus[2:end],cov_num[i,j,2:end] ; linewidth = 3)\n  return plot!(plt,taush[2:end],Cfou[i,j,2:end]; linestyle=:dash, linewidth=3)\nend","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"1","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"oneplot(1,1)","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"2","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"oneplot(1,2)","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"3","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"oneplot(2,1)","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"4","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"oneplot(2,2)","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"Perfect match!","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"#","category":"page"},{"location":"2d_delay_autapses/#Visualize-raster-plot","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"Visualize raster plot","text":"","category":"section"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"the raster plot shows some correlation between the neural activities neuron one (lower row) excites neuron two (upper row)","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"function doplot(tlims = (3000.,3080.) )\n  plt=plot()\n  for (is,_train) in enumerate(myspikes_all)\n    train = filter(t-> tlims[1]< t < tlims[2],_train)\n    nspk = length(train)\n    scatter!(plt,train,fill(0.1*(is),nspk),markersize=30,\n      markercolor=:black,markershape=:vline,leg=false)\n  end\n  return plot!(plt,ylims=(0.0,0.3))\nend\n\ndoplot()","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"THE END","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"","category":"page"},{"location":"2d_delay_autapses/","page":"2D process with delayed-alpha mutual interactions and exp self interaction","title":"2D process with delayed-alpha mutual interactions and exp self interaction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = HawkesSimulator","category":"page"},{"location":"#Hawkes-Processes-Simulator","page":"Home","title":"Hawkes Processes Simulator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nThe documentation is still missing. Please see the \"examples\" section for usage.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HawkesSimulator]","category":"page"},{"location":"#HawkesSimulator.clear_trains!","page":"Home","title":"HawkesSimulator.clear_trains!","text":"clear_trains!(ps::PopulationState,tlim=30.0)\n\nMoves the spike train older than tlim to history. The spikes in history are not considered for  interaction. This is necessary to make the dynamics efficient.\n\n\n\n\n\n","category":"function"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"1D and 2D, exponential kernel\n1D delayed-alpha kernel\n2D delayed-alpha interactions, and non-delayed autapses","category":"page"}]
}
